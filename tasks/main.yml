---
- name: include os-specific variables
  include_vars: "{{ ansible_os_family }}.yml"
  when: ansible_os_family == "Debian" or (ansible_os_family == "RedHat" and not (ansible_distribution == "CentOS" and ansible_distribution_version is version_compare('6.0', operator='>=') and ansible_distribution_version is version_compare('7.0', operator='<')))
  failed_when:
    - ansible_os_family != "Debian"
    - ansible_os_family != "RedHat"

- name: include CentOS 6-specific variables
  include_vars: "{{ ansible_distribution }}_6.yml"
  when:
    - ansible_distribution == "CentOS"
    - ansible_distribution_version is version_compare('6.0', operator='>=')
    - ansible_distribution_version is version_compare('7.0', operator='<')

- name: install package dependencies for environment modules installation
  become: true
  package:
    name: "{{ modules_package_dependencies }}"
    state: present

- name: check for installation of environment modules
  shell: bash -lc "module --version"
  changed_when: false
  failed_when: false
  register: modules_installed_version

- name: compile and install environment modules
  when: "(modules_installed_version.rc != 0) or ((modules_installed_version.rc == 0) and (modules_installed_version.stderr | regex_replace(\"^.*?([0-9\\.]+).*?$\", \"\\1\") is version_compare(modules_version, operator='<')))"
  block:
    - name: download environment modules source
      get_url:
        url: "{{ modules_src_url }}"
        checksum: "{{ modules_checksum }}"
        dest: "/tmp/{{ modules_src_tar_gz }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0644
        timeout: "{{ modules_timeout_seconds }}"

    - name: unarchive environment modules source
      unarchive:
        src: "/tmp/{{ modules_src_tar_gz }}"
        dest: "/tmp/"
        creates: "/tmp/{{ modules_name }}/README"
        copy: false

    - name: configure
      shell: bash -lc "./configure --prefix={{ modules_dir | quote }} --modulefilesdir={{ modules_modulefiles_dir | quote }}"
      args:
        chdir: "/tmp/{{ modules_name }}"
        creates: "/tmp/{{ modules_name }}/site.exp"

    - name: make
      make:
        chdir: "/tmp/{{ modules_name }}"
        params:
          MAKE: "{{ modules_make_cmd }}"

    - name: make install
      become: true
      make:
        chdir: "/tmp/{{ modules_name }}"
        target: install

- name: delete environment modules source
  file:
    path: "/tmp/{{ item }}"
    state: absent
  with_items:
    - "{{ modules_src_tar_gz }}"
    - "{{ modules_name }}/"

- name: link /etc/profile.d/modules.sh
  become: true
  file:
    src: "{{ modules_init_profile }}.sh"
    dest: "{{ modules_etc_profile }}/modules.sh"
    state: link

- name: link /etc/profile.d/modules.csh
  become: true
  file:
    src: "{{ modules_init_profile }}.csh"
    dest: "{{ modules_etc_profile }}/modules.csh"
    state: link

- name: source bash init script in /etc/bash.bashrc (Debian-based distros)
  become: true
  blockinfile:
    path: "/etc/bash.bashrc"
    state: present
    block: |
      # Initialize environment modules
      . {{ modules_init_bash }}
    marker: '# {mark} ANSIBLE MANAGED BLOCK jkglasbrenner.environment_modules'
  when: ansible_os_family == 'Debian'

- name: configure settings in modulerc
  become: true
  template:
    src: "modulerc.j2"
    dest: "{{ modules_init_modulerc }}"
    mode: 0644
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: configure local path in use.own module
  become: true
  template:
    src: "use.own.j2"
    dest: "{{ modules_init_use_own }}"
    mode: 0644
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: remove example modulefiles
  become: true
  file:
    path: "{{ modules_modulefiles_dir }}/{{ item }}"
    state: absent
  with_items:
    "{{ modules_example_modulefiles_to_remove }}"
...
